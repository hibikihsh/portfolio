---
import type { TagCategory } from "../types/tag";

interface Props {
  allTags: string[];
  tagCategories: TagCategory[];
}

const { allTags, tagCategories } = Astro.props;
---

<div class="px-4">
  <label for="tag-filter" class="block text-xs font-medium text-gray-400 mb-1"
    >タグで絞り込む</label
  >
  <div class="select-container">
    <button
      type="button"
      id="select-trigger"
      class="select-trigger"
      aria-haspopup="listbox"
      aria-expanded="false"
    >
      <span id="select-value" class="select-value">すべての投稿</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="select-chevron"><path d="m6 9 6 6 6-6"></path></svg
      >
    </button>
    <div id="select-content" class="select-content" role="listbox">
      <div class="select-item" data-value="">すべての投稿を表示</div>
      {
        tagCategories.map((category) => (
          <div class="select-group">
            <div class="select-label">{category.name}</div>
            {category.tags
              .filter((tag) => allTags.includes(tag))
              .map((tag) => (
                <div class="select-item" data-value={tag}>
                  {tag}
                </div>
              ))}
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  /* shadcn風のセレクトスタイル */
  .select-container {
    position: relative;
    width: 200px;
  }

  .select-trigger {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    min-width: 180px;
    height: 40px;
    padding: 0 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .select-trigger:hover {
    background-color: #f8fafc;
    border-color: #cbd5e1;
  }

  .select-trigger:focus {
    outline: none;
    border-color: #94a3b8;
    box-shadow: 0 0 0 2px rgba(148, 163, 184, 0.2);
  }

  .select-value {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .select-chevron {
    width: 16px;
    height: 16px;
    color: #64748b;
    transition: transform 0.2s ease;
  }

  .select-content {
    position: absolute;
    top: calc(100% + 5px);
    left: 0;
    width: 100%;
    max-height: 0;
    overflow: hidden;
    background-color: white;
    border-radius: 0.375rem;
    border: 1px solid transparent;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    opacity: 0;
    transform: translateY(-10px);
    z-index: 10;
    transition:
      max-height 0.2s ease,
      opacity 0.2s ease,
      transform 0.2s ease,
      border-color 0.2s ease;
  }

  .select-content.open {
    max-height: 300px;
    opacity: 1;
    border-color: #e2e8f0;
    transform: translateY(0);
    overflow-y: auto;
  }

  .select-group {
    padding: 0.25rem 0;
  }

  .select-label {
    display: block;
    font-size: 0.75rem;
    line-height: 1rem;
    font-weight: 500;
    color: #64748b;
    padding: 0.5rem 1rem 0.25rem;
  }

  .select-item {
    position: relative;
    display: block;
    width: 100%;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: #334155;
    text-align: left;
    cursor: pointer;
    user-select: none;
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
  }

  .select-item:hover {
    background-color: #f1f5f9;
    color: #0f172a;
  }

  .select-item.selected {
    font-weight: 500;
    color: #0f172a;
  }

  .select-item.selected::after {
    content: "✓";
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // shadcnスタイルのセレクト機能
    const selectTrigger = document.getElementById("select-trigger");
    const selectValue = document.getElementById("select-value");
    const selectContent = document.getElementById("select-content");
    const selectItems = document.querySelectorAll(".select-item");
    const postList = document.getElementById("post-list");

    if (selectTrigger && selectValue && selectContent && postList) {
      const postItems = postList.querySelectorAll("li");

      // セレクトを開く・閉じる
      selectTrigger.addEventListener("click", () => {
        const isExpanded =
          selectTrigger.getAttribute("aria-expanded") === "true";

        if (isExpanded) {
          selectTrigger.setAttribute("aria-expanded", "false");
          selectContent.classList.remove("open");
        } else {
          selectTrigger.setAttribute("aria-expanded", "true");
          selectContent.classList.add("open");
        }
      });

      // 外部クリックでセレクトを閉じる
      document.addEventListener("click", (event) => {
        if (
          event.target instanceof Node &&
          !selectTrigger.contains(event.target) &&
          !selectContent.contains(event.target)
        ) {
          selectTrigger.setAttribute("aria-expanded", "false");
          selectContent.classList.remove("open");
        }
      });

      // アイテム選択
      selectItems.forEach((item) => {
        if (!(item instanceof HTMLElement)) return;

        item.addEventListener("click", () => {
          const value = item.getAttribute("data-value") || "";
          const text = item.textContent || "";

          // 選択した値を表示
          selectValue.textContent = text;

          // 選択状態を更新
          selectItems.forEach((si) => {
            if (si instanceof HTMLElement) {
              si.classList.remove("selected");
            }
          });
          item.classList.add("selected");

          // セレクトを閉じる
          selectTrigger.setAttribute("aria-expanded", "false");
          selectContent.classList.remove("open");

          // 記事をフィルタリング
          postItems.forEach((postItem) => {
            const itemTags =
              postItem.getAttribute("data-tags")?.split(",") || [];

            if (!value || itemTags.includes(value)) {
              postItem.style.display = "";
            } else {
              postItem.style.display = "none";
            }
          });
        });
      });

      // 初期状態で「すべての投稿を表示」を選択状態に
      const defaultItem = selectItems[0];
      if (defaultItem instanceof HTMLElement) {
        defaultItem.classList.add("selected");
      }
    }
  });
</script>
